From adc21b16034b61d6c93d8b0286e038d4bb1e2f8c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Piotr=20Kr=C3=B3l?= <piotr.krol@3mdeb.com>
Date: Mon, 21 Nov 2016 23:45:47 +0100
Subject: [PATCH 14/88] mainboard/pcengines: add support for getting sku and
 serial number
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This commit modifies the smbios_mainboard_serial_number function in the
apu2 mainboard code. It now first attempts to read the serial number
from flash. If this attempt fails, or if the serial number read from
flash is invalid (either 0x00 or 0xff), it will then read the serial
number from the NIC.

This change allows for more flexibility in obtaining the serial number,
which can be helpful in situations where the NIC is not available or the
serial number in the NIC is not set.

The commit also includes necessary includes and defines for the new
functionality. The obtained information is exposed in SMBIOS tables.

Upstream-Status: Pending
Signed-off-by: Maciej Pijanowski <maciej.pijanowski@3mdeb.com>
Signed-off-by: Piotr Kr√≥l <piotr.krol@3mdeb.com>
---
 src/mainboard/pcengines/apu2/mainboard.c | 63 ++++++++++++++++++++----
 1 file changed, 53 insertions(+), 10 deletions(-)

diff --git a/src/mainboard/pcengines/apu2/mainboard.c b/src/mainboard/pcengines/apu2/mainboard.c
index 242ad9d932..1c3f80acb8 100644
--- a/src/mainboard/pcengines/apu2/mainboard.c
+++ b/src/mainboard/pcengines/apu2/mainboard.c
@@ -1,5 +1,9 @@
 /* SPDX-License-Identifier: GPL-2.0-only */
 
+#pragma pack(push)
+#include <AGESA.h>
+#pragma pack(pop)
+
 #include <amdblocks/acpimmio.h>
 #include <device/mmio.h>
 #include <device/pci_ops.h>
@@ -17,12 +21,15 @@
 #include <superio/nuvoton/nct5104d/nct5104d.h>
 #include <smbios.h>
 #include <stdio.h>
-#include <AGESA.h>
+#include <spi_flash.h>
 #include "gpio_ftns.h"
+#include "bios_knobs.h"
 
 #define SPD_SIZE  128
 #define PM_RTC_CONTROL	    0x56
 #define PM_S_STATE_CONTROL  0xBA
+#define SEC_REG_SERIAL_ADDR	0x1000
+#define MAX_SERIAL_LEN		10
 
 /***********************************************************
  * These arrays set up the FCH PCI_INTR registers 0xC00/0xC01.
@@ -263,23 +270,21 @@ static void mainboard_final(void *chip_info)
  * We will stuff a modified version of the first NICs (BDF 1:0.0) MAC address
  * into the smbios serial number location.
  */
-const char *smbios_mainboard_serial_number(void)
+static int read_serial_from_nic(char *serial, size_t len)
 {
-	static char serial[10];
 	struct device *dev;
 	uintptr_t bar10;
 	u32 mac_addr = 0;
 	int i;
+	if (check_pciereverse())
+		dev = pcidev_on_root(2, 3);
+	else
+		dev = pcidev_on_root(2, 2);
 
-	/* Already initialized. */
-	if (serial[0] != 0)
-		return serial;
-
-	dev = pcidev_on_root(2, 2);
 	if (dev)
 		dev = pcidev_path_behind(dev->downstream, PCI_DEVFN(0, 0));
 	if (!dev)
-		return serial;
+		return -1;
 
 	/* Read in the last 3 bytes of NIC's MAC address. */
 	bar10 = pci_read_config32(dev, PCI_BASE_ADDRESS_0);
@@ -293,7 +298,45 @@ const char *smbios_mainboard_serial_number(void)
 	mac_addr /= 4;
 	mac_addr -= 64;
 
-	snprintf(serial, sizeof(serial), "%d", mac_addr);
+	snprintf(serial, len, "%d", mac_addr);
+	return 0;
+}
+
+static int read_serial_from_flash(char *serial, size_t len)
+{
+	const struct spi_flash *flash = NULL;
+	int ret;
+
+	flash = boot_device_spi_flash();
+	if (flash == NULL) {
+		printk(BIOS_WARNING, "Can't get boot flash device\n");
+		return -1;
+	}
+
+	ret = spi_flash_read_sec(flash, SEC_REG_SERIAL_ADDR, len, serial);
+	if (ret) {
+		printk(BIOS_WARNING, "Can't read security registers\n");
+		return ret;
+	}
+
+	return ret;
+}
+
+const char *smbios_mainboard_serial_number(void)
+{
+	static char serial[MAX_SERIAL_LEN + 1] = { 0 }; /* extra slot for \0 */
+	int ret;
+
+	ret = read_serial_from_flash(serial, sizeof(serial)-1);
+
+	if (ret || ((serial[0] & 0xff) == 0x00) || ((serial[0] & 0xff) == 0xff)) {
+		ret = read_serial_from_nic(serial, sizeof(serial)-1);
+		if (ret) {
+			serial[0] = '0';
+			serial[1] = '\0';
+		}
+	}
+
 	return serial;
 }
 
-- 
2.49.0

