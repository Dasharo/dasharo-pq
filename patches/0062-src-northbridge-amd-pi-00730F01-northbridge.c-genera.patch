From 996d44f60bb447bd79791c1c606def62e419f2d4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Micha=C5=82=20=C5=BBygowski?= <michal.zygowski@3mdeb.com>
Date: Sat, 27 Jun 2020 21:02:35 +0200
Subject: [PATCH 62/85] src/northbridge/amd/pi/00730F01/northbridge.c: generate
 DRTM table
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Michał Żygowski <michal.zygowski@3mdeb.com>
---
 src/northbridge/amd/pi/00730F01/northbridge.c | 89 +++++++++++++++++++
 1 file changed, 89 insertions(+)

diff --git a/src/northbridge/amd/pi/00730F01/northbridge.c b/src/northbridge/amd/pi/00730F01/northbridge.c
index 0f08cddf63..519c190812 100644
--- a/src/northbridge/amd/pi/00730F01/northbridge.c
+++ b/src/northbridge/amd/pi/00730F01/northbridge.c
@@ -11,6 +11,8 @@
 #include <device/device.h>
 #include <device/pci.h>
 #include <device/pci_ids.h>
+#include <cbmem.h>
+#include <version.h>
 #include <string.h>
 #include <stdlib.h>
 #include <cpu/x86/mp.h>
@@ -421,6 +423,83 @@ static void northbridge_fill_ssdt_generator(const struct device *device)
 	acpigen_pop_len();
 }
 
+static void *get_drtm_tpm_log(u32 *size)
+{
+	const struct cbmem_entry *ce;
+	const u32 drtm_default_log_len = 0x1000;
+	void *lasa;
+	ce = cbmem_entry_find(CBMEM_ID_DRTM_LOG);
+	if (ce) {
+		lasa = cbmem_entry_start(ce);
+		*size = cbmem_entry_size(ce);
+		printk(BIOS_DEBUG, "DRTM log found at %p\n", lasa);
+		return lasa;
+	}
+	lasa = cbmem_add(CBMEM_ID_DRTM_LOG, drtm_default_log_len);
+	if (!lasa) {
+		printk(BIOS_ERR, "DRTM log creation failed\n");
+		return NULL;
+	}
+
+	printk(BIOS_DEBUG, "DRTM log created at %p\n", lasa);
+	memset(lasa, 0, drtm_default_log_len);
+
+	*size = drtm_default_log_len;
+	return lasa;
+}
+
+static void acpi_create_drtm_table(acpi_drtm_t *drtm)
+{
+	acpi_header_t *header = &(drtm->header);
+	unsigned long current;
+	drtm_validated_tables_list_t *drtm_vtl;
+	drtm_resources_t *drtm_resources;
+	drtm_dps_t *drtm_dps;
+
+	memset((void *)drtm, 0, sizeof(acpi_drtm_t));
+
+	/*
+	 * Some payloads like SeaBIOS depend on log area to use TPM2.
+	 * Get the memory size and address of TPM2 log area or initialize it.
+	 */
+	drtm->log_area_start = (uintptr_t)get_drtm_tpm_log(&(drtm->log_area_length));
+
+	/* Fill out header fields. */
+	memcpy(header->signature, "DRTM", 4);
+	memcpy(header->oem_id, OEM_ID, 6);
+	memcpy(header->oem_table_id, ACPI_TABLE_CREATOR, 8);
+	memcpy(header->asl_compiler_id, ASLC, 4);
+
+	header->asl_compiler_revision = asl_revision;
+	header->length = sizeof(acpi_drtm_t);
+	header->revision = get_acpi_table_revision(DRTM);
+
+	drtm->drt_flags |= DRT_GAP_CODE_ON_S3_RESUME | DRT_GAP_CODE_ON_DLME_EXIT;
+
+	current = (unsigned long)drtm;
+	current += sizeof(acpi_drtm_t);
+
+	/* Validated ACPI tables go first */
+	drtm_vtl = (drtm_validated_tables_list_t *)current;
+	drtm_vtl->vtl_length = 0; /* unused for now */
+	current += sizeof(drtm_vtl->vtl_length) + drtm_vtl->vtl_length;
+	header->length += sizeof(drtm_vtl->vtl_length) + drtm_vtl->vtl_length;
+
+	/* DRTM Resources List */
+	drtm_resources = (drtm_resources_t *)current;
+	drtm_resources->rl_length = 0; /* unused for now */
+	current += sizeof(drtm_resources->rl_length) + drtm_resources->rl_length;
+	header->length += sizeof(drtm_resources->rl_length) + drtm_resources->rl_length;
+
+	/* DLME Platfrom Specific IDs */
+	drtm_dps = (drtm_dps_t *)current;
+	drtm_dps->dps_length = 0; /* unused for now */
+	header->length += sizeof(drtm_dps_t); /* DPS list is 16-byte fixed size */
+
+	/* Calculate checksum. */
+	header->checksum = acpi_checksum((void *)drtm, header->length);
+}
+
 static unsigned long agesa_write_acpi_tables(const struct device *device,
 					     unsigned long current,
 					     acpi_rsdp_t *rsdp)
@@ -430,6 +509,7 @@ static unsigned long agesa_write_acpi_tables(const struct device *device,
 	acpi_header_t *ssdt;
 	acpi_header_t *alib;
 	acpi_ivrs_t *ivrs;
+	acpi_drtm_t *drtm;
 
 	/* HEST */
 	current = ALIGN_UP(current, 8);
@@ -503,6 +583,15 @@ static unsigned long agesa_write_acpi_tables(const struct device *device,
 	acpi_add_table(rsdp, ssdt);
 
 	printk(BIOS_DEBUG, "ACPI:    * SSDT for PState at %lx\n", current);
+
+	/* DRTM */
+	current = ALIGN(current, 16);
+	printk(BIOS_DEBUG, "ACPI:   * DRTM at %lx\n", current);
+	drtm = (acpi_drtm_t *)current;
+	acpi_create_drtm_table(drtm);
+	current += drtm->header.length;
+	acpi_add_table(rsdp, drtm);
+
 	return current;
 }
 
-- 
2.49.0

