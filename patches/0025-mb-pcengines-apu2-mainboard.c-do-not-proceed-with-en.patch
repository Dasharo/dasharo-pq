From 5994f494e34aa38ec48cf30836ba64b6d6c2e78d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Micha=C5=82=20=C5=BBygowski?= <michal.zygowski@3mdeb.com>
Date: Tue, 3 Apr 2018 17:19:49 +0200
Subject: [PATCH 25/80] mb/pcengines/apu2/mainboard.c: do not proceed with
 enabling serial when offset invalid
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Michał Żygowski <michal.zygowski@3mdeb.com>
Signed-off-by: Piotr Król <piotr.krol@3mdeb.com>
diff --git a/src/mainboard/pcengines/apu2/mainboard.c b/src/mainboard/pcengines/apu2/mainboard.c
index ce55634db902..249614870fd5 100644
--- a/src/mainboard/pcengines/apu2/mainboard.c
+++ b/src/mainboard/pcengines/apu2/mainboard.c
@@ -22,6 +22,8 @@
 #include <smbios.h>
 #include <string.h>
 
+#include <fmap.h>
+#include <security/tpm/tspi.h>
 #include <cpu/amd/mtrr.h>
 #include <spd_bin.h>
 #include <spi_flash.h>
@@ -39,8 +41,6 @@
 #define SEC_REG_SERIAL_ADDR	0x1000
 #define MAX_SERIAL_LEN		10
 
-#define BOOTORDER_FILE "bootorder"
-
 /***********************************************************
  * These arrays set up the FCH PCI_INTR registers 0xC00/0xC01.
  * This table is responsible for physically routing the PIC and
@@ -72,7 +72,7 @@ static const u8 mainboard_picr_data[FCH_INT_TABLE_SIZE] = {
 	[0x48] = 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 	[0x50] = 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 	[0x58] = 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	[0x60] = 0x00,0x00,0x1F
+	[0x60] = 0x00,0x00,0x07
 };
 
 static const u8 mainboard_intr_data[FCH_INT_TABLE_SIZE] = {
@@ -95,7 +95,7 @@ static const u8 mainboard_intr_data[FCH_INT_TABLE_SIZE] = {
 	[0x48] = 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 	[0x50] = 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 	[0x58] = 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-	[0x60] = 0x00,0x00,0x1F
+	[0x60] = 0x00,0x00,0x07
 };
 
 /*
@@ -193,6 +193,19 @@ static void config_gpio_mux(void)
 	}
 }
 
+static void measure_amd_blobs(void)
+{
+	struct region_device rdev;
+
+	printk(BIOS_DEBUG, "Measuring AMD blobs.\n");
+
+	if(fmap_locate_area_as_rdev("PSPDIR", &rdev)) {
+		printk(BIOS_ERR, "Error: Couldn't find PSPDIR region.");
+		return;
+	}
+	tpm_measure_region(&rdev, CONFIG_PCR_RUNTIME_DATA,"PSPDIR");
+}
+
 /**********************************************
  * enable the dedicated function in mainboard.
  **********************************************/
@@ -217,6 +230,24 @@ static int mainboard_smbios_type16(DMI_INFO *agesa_dmi, int *handle,
 	return len;
 }
 
+static int ddr_speed_from_bus_speed(int bus)
+{
+	switch(bus)
+	{
+		case 166:
+		case 216:
+		case 266:
+		case 333:
+		case 1066:
+		case 1666: return bus*2+1;
+		case 556:
+		case 667:
+		case 688:
+		case 813:  return bus*2-1;
+		default:   return bus*2;
+	}
+}
+
 static int mainboard_smbios_type17(DMI_INFO *agesa_dmi, int *handle,
 				 unsigned long *current)
 {
@@ -236,7 +267,7 @@ static int mainboard_smbios_type17(DMI_INFO *agesa_dmi, int *handle,
 				agesa_dmi->T17[0][0][0].BankLocator);
 	t->memory_type = agesa_dmi->T17[0][0][0].MemoryType;
 	t->type_detail = *(u16 *)&agesa_dmi->T17[0][0][0].TypeDetail;
-	t->speed = agesa_dmi->T17[0][0][0].Speed;
+	t->speed = ddr_speed_from_bus_speed(agesa_dmi->T17[0][0][0].Speed);
 	t->manufacturer = agesa_dmi->T17[0][0][0].ManufacturerIdCode;
 	t->serial_number = smbios_add_string(t->eos,
 				agesa_dmi->T17[0][0][0].SerialNumber);
@@ -244,7 +275,8 @@ static int mainboard_smbios_type17(DMI_INFO *agesa_dmi, int *handle,
 				agesa_dmi->T17[0][0][0].PartNumber);
 	t->attributes = agesa_dmi->T17[0][0][0].Attributes;
 	t->extended_size = agesa_dmi->T17[0][0][0].ExtSize;
-	t->clock_speed = agesa_dmi->T17[0][0][0].ConfigSpeed;
+	t->clock_speed = ddr_speed_from_bus_speed(
+				agesa_dmi->T17[0][0][0].ConfigSpeed);
 	t->minimum_voltage = 1500; /* From SPD: 1.5V */
 	t->maximum_voltage = 1500;
 
@@ -308,6 +340,12 @@ static void mainboard_enable(struct device *dev)
 	//
 	pm_write16(PM_RTC_CONTROL, pm_read16(PM_RTC_CONTROL) | (1 << 11));
 
+	if (CONFIG(VBOOT_MEASURED_BOOT)) {
+		/* Measure AGESA and PSPDIR */
+		measure_amd_blobs();
+	}
+
+
 	//
 	// Enable power on from WAKE#
 	//
@@ -321,6 +359,17 @@ static void mainboard_enable(struct device *dev)
 
 	/* Initialize the PIRQ data structures for consumption */
 	pirq_setup();
+
+	/* Enable IOMMU if activated in config file */
+	struct device* iommu_dev;
+	iommu_dev = pcidev_on_root(0, 2);
+
+	if (iommu_dev) {
+		if (check_iommu())
+			iommu_dev->enabled = 1;
+		else
+			iommu_dev->enabled = 0;
+	}
 #if CONFIG(GENERATE_SMBIOS_TABLES)
 	dev->ops->get_smbios_data = mainboard_smbios_data;
 #endif
