From c5ea55e10da22548799b8a66cb043bed259ab14b Mon Sep 17 00:00:00 2001
From: Krystian Hebel <krystian.hebel@3mdeb.com>
Date: Tue, 31 Dec 2019 20:30:21 +0100
Subject: [PATCH 56/88] mainboard/apu2: fix watchdog issues
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Platform hanged without setting RstToCpuPwrGdEn.

Code for enabling watchdog is now in board_BeforeInitEarly, as hardware
is not enabled before InitReset. It didn't work on first boot after
power cycle.

Upstream-Status: Pending
Signed-off-by: Krystian Hebel <krystian.hebel@3mdeb.com>
Signed-off-by: Michał Żygowski <michal.zygowski@3mdeb.com>
---
 src/mainboard/pcengines/apu2/OemCustomize.c |  34 +++++
 src/mainboard/pcengines/apu2/bootblock.c    |  14 ++-
 src/mainboard/pcengines/apu2/romstage.c     | 132 ++++++++++++++++++++
 3 files changed, 174 insertions(+), 6 deletions(-)

diff --git a/src/mainboard/pcengines/apu2/OemCustomize.c b/src/mainboard/pcengines/apu2/OemCustomize.c
index 0a2b68529f..2f837fd9d8 100644
--- a/src/mainboard/pcengines/apu2/OemCustomize.c
+++ b/src/mainboard/pcengines/apu2/OemCustomize.c
@@ -3,6 +3,9 @@
 #include <AGESA.h>
 #include <northbridge/amd/agesa/state_machine.h>
 #include "bios_knobs.h"
+#include <smp/node.h>
+#include <Fch/Fch.h>
+#include <amdblocks/acpimmio.h>
 
 #include "gpio_ftns.h"
 
@@ -82,6 +85,37 @@ void board_BeforeInitEarly(struct sysinfo *cb, AMD_EARLY_PARAMS *InitEarly)
 		InitEarly->PlatformConfig.CStateMode = CStateModeC6;
 		InitEarly->PlatformConfig.CpbMode = CpbModeAuto;
 	}
+
+	if (boot_cpu()) {
+		volatile u32 *ptr = (u32 *)(ACPI_MMIO_BASE + WATCHDOG_BASE);
+
+		/*
+		 * Set PMxBE[RstToCpuPwrGdEn] = 1: FCH toggles CpuPwrGd on every reset.
+		 * Without it, after watchdog causes a restart, D18F5x84[CmpCap]
+		 * (number of cores on the node) sometimes reads as 0. Because of that
+		 * AGESA hangs in subsequent InitReset calls, until next cold reset.
+		 */
+		pm_write8(FCH_PMIOA_REGBE, pm_read8(FCH_PMIOA_REGBE) | 0x80);
+
+		u16 watchdog_timeout = get_watchdog_timeout();
+
+		if (watchdog_timeout == 0) {
+			// watchdog disabled - default state
+			printk(BIOS_WARNING, "Watchdog is disabled\n");
+		} else {
+			// bit 1 (WatchdogFired) is write-1-to-clear, needs to be preserved
+			u32 val = *ptr & ~(1 << 1);
+			// enable
+			*ptr = val | (1 << 0);
+			// configure timeout
+			*(ptr + 1) = (u16) watchdog_timeout;
+			// trigger
+			val = *ptr & ~(1 << 1);
+			*ptr = val | (1 << 7);
+
+			printk(BIOS_WARNING, "Watchdog is enabled, state = 0x%x, time = %d\n", *ptr, *(ptr + 1));
+		}
+	}
 }
 
 void board_BeforeInitPost(struct sysinfo *cb, AMD_POST_PARAMS *Post)
diff --git a/src/mainboard/pcengines/apu2/bootblock.c b/src/mainboard/pcengines/apu2/bootblock.c
index 3fa35af0ad..464b3c6035 100644
--- a/src/mainboard/pcengines/apu2/bootblock.c
+++ b/src/mainboard/pcengines/apu2/bootblock.c
@@ -6,6 +6,8 @@
 #include <superio/nuvoton/common/nuvoton.h>
 #include <superio/nuvoton/nct5104d/nct5104d.h>
 
+#include "bios_knobs.h"
+
 #define SIO_PORT 0x2e
 #define SERIAL1_DEV PNP_DEV(SIO_PORT, NCT5104D_SP1)
 #define SERIAL2_DEV PNP_DEV(SIO_PORT, NCT5104D_SP2)
@@ -15,10 +17,10 @@ void bootblock_mainboard_early_init(void)
 	hudson_lpc_port80();
 	hudson_clk_output_48Mhz();
 
-	/* COM2 on apu5 is reserved so only COM1 should be supported */
-	if ((CONFIG_UART_FOR_CONSOLE == 1) &&
-		!CONFIG(BOARD_PCENGINES_APU5))
-		nuvoton_enable_serial(SERIAL2_DEV, CONFIG_TTYS0_BASE);
-	else if (CONFIG_UART_FOR_CONSOLE == 0)
-		nuvoton_enable_serial(SERIAL1_DEV, CONFIG_TTYS0_BASE);
+	/* Enable UARTB for LPC MCU */
+	if (CONFIG(BOARD_PCENGINES_APU5))
+		nuvoton_enable_serial(SERIAL2_DEV, 0x2f8);
+
+	if ((check_com2() || (CONFIG_UART_FOR_CONSOLE == 1)))
+		nuvoton_enable_serial(SERIAL2_DEV, 0x2f8);
 }
diff --git a/src/mainboard/pcengines/apu2/romstage.c b/src/mainboard/pcengines/apu2/romstage.c
index 2509031f3e..5b9f9f7aa6 100644
--- a/src/mainboard/pcengines/apu2/romstage.c
+++ b/src/mainboard/pcengines/apu2/romstage.c
@@ -1,17 +1,27 @@
 /* SPDX-License-Identifier: GPL-2.0-only */
 
 #include <stdint.h>
+#include <string.h>
+#include <delay.h>
 #include <amdblocks/acpimmio.h>
 #include <amdblocks/gpio.h>
 #include <amdblocks/gpio_defs.h>
 #include <device/pci_def.h>
 #include <device/pci_ops.h>
+#include <console/uart.h>
 #include <gpio.h>
 #include <northbridge/amd/agesa/state_machine.h>
+#include <Fch/Fch.h>
+#include <smp/node.h>
 
+#include "bios_knobs.h"
 #include "gpio_ftns.h"
 
 static void early_lpc_init(void);
+static void print_sign_of_life(void);
+static void lpc_mcu_msg(void);
+extern char coreboot_dmi_date[];
+extern char coreboot_version[];
 
 void board_BeforeAgesa(struct sysinfo *cb)
 {
@@ -71,3 +81,125 @@ static void early_lpc_init(void)
 	if (CONFIG(BOARD_PCENGINES_APU5))
 		gpio_configure_pads(gpio_apu5, ARRAY_SIZE(gpio_apu5));
 }
+
+static const char *mainboard_bios_version(void)
+{
+	if (strlen(CONFIG_LOCALVERSION))
+		return CONFIG_LOCALVERSION;
+	else
+		return coreboot_version;
+}
+
+static void print_sign_of_life(void)
+{
+	char tmp[9];
+	strncpy(tmp,   coreboot_dmi_date+6, 4);
+	strncpy(tmp+4, coreboot_dmi_date+3, 2);
+	strncpy(tmp+6, coreboot_dmi_date,   2);
+	tmp[8] = '\0';
+	printk(BIOS_ALERT, CONFIG_MAINBOARD_VENDOR " "
+	                   CONFIG_MAINBOARD_PART_NUMBER "\n");
+	printk(BIOS_ALERT, "coreboot build %s\n", tmp);
+	printk(BIOS_ALERT, "BIOS version %s\n", mainboard_bios_version());
+}
+
+void board_BeforeInitReset(struct sysinfo *cb, AMD_RESET_PARAMS *Reset)
+{
+	u32 val, data;
+
+	if (boot_cpu()) {
+		pm_write8(FCH_PMIOA_REGC5, 0);
+
+		/* Check if cold boot was requested */
+		val = pci_read_config32(PCI_DEV(0, 0x18, 0), 0x6C);
+		if (val & (1 << 4)) {
+			printk(BIOS_ALERT, "Forcing cold boot path\n");
+			val &= ~(0x630); // ColdRstDet[4], BiosRstDet[10:9, 5]
+			pci_write_config32(PCI_DEV(0, 0x18, 0), 0x6C, val);
+
+			pm_write32(0xc0, 0x3fff003f); // Write-1-to-clear resets
+
+			/* FullRst, SysRst, RstCmd */
+			pm_write8(FCH_PMIOA_REGC5, 0xe);
+			printk(BIOS_ALERT, "Did not reset (yet)\n");
+		}
+
+		// do not print SOL if reset will take place in FchInit
+		if (!(pm_read32(0xc0) & FCH_PMIOxC0_S5ResetStatus_All_Status)) {
+			if (check_console())
+				print_sign_of_life();
+			
+			lpc_mcu_msg();
+		}
+
+		if ((check_mpcie2_clk() || CONFIG(FORCE_MPCIE2_CLK)) &&
+		     CONFIG(BOARD_PCENGINES_APU2)) {
+			// make GFXCLK to ignore CLKREQ# input
+			// force it to be always on
+			data = misc_read32(FCH_MISC_REG04);
+			data &= 0xFFFFFF0F;
+			data |= 0xF << (1 * 4); // CLKREQ GFX to GFXCLK
+			misc_write32(FCH_MISC_REG04, data);
+			printk(BIOS_DEBUG, "force mPCIe clock enabled\n");
+		}
+	}
+}
+
+static void lpc_mcu_msg(void)
+{
+	unsigned int i, timeout;
+	const char *post_msg = "BIOSBOOT";
+	unsigned char sync_byte = 0;
+
+	if (!CONFIG(BOARD_PCENGINES_APU5))
+		return;
+
+	uart_init(1);
+
+	for (i = 0; i < 4; i++) {
+		uart_tx_byte(1, 0xe1);
+		uart_tx_flush(1);
+		timeout = 10;
+		while (sync_byte != 0xe1) {
+			sync_byte = uart_rx_byte(1);
+			if (timeout == 0) {
+				uart_init(CONFIG_UART_FOR_CONSOLE);
+				udelay(10000);
+				printk(BIOS_ERR, "Failed to sync with LPC"
+				       " MCU, number of retries %d\n", 3 - i);
+				udelay(10000);
+				uart_init(1);
+				udelay(10000);
+				break;
+			}
+			udelay(100);
+			timeout--;
+		}
+		if (sync_byte == 0xe1)
+			break;
+	}
+
+	if (sync_byte != 0xe1)
+		return;
+
+	uart_init(1);
+	timeout = 10;
+
+	for (i = 0; i < strlen(post_msg); i++)
+		uart_tx_byte(1, *(post_msg + i));
+
+	uart_tx_byte(1, 0xe1);
+	uart_tx_flush(1);
+
+	while (uart_rx_byte(1) != 0xe1) {
+		if (timeout == 0) {
+			uart_init(CONFIG_UART_FOR_CONSOLE);
+			printk(BIOS_ERR, "Did not receive response to BIOSBOOT\n");
+			return;
+		}
+		udelay(100);
+		timeout--;
+	}
+
+	uart_init(CONFIG_UART_FOR_CONSOLE);
+}
-- 
2.49.0

