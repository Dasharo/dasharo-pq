From 1b03955025fd9a3007526e35138398dd952f95af Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Piotr=20Kr=C3=B3l?= <piotr.krol@3mdeb.com>
Date: Mon, 6 May 2024 18:23:46 +0200
Subject: [PATCH 21/87] mainboard/pcengines: add support for s1 button
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

On apu5 the S1 button is not present. Its GPIO is used as a
SIMSWAP.

Upstream-Status: Inappropriate [Should be payload's feature]
Signed-off-by: Michał Żygowski <michal.zygowski@3mdeb.com>
---
 src/mainboard/pcengines/apu2/Makefile.mk |   3 +
 src/mainboard/pcengines/apu2/s1_button.c | 115 +++++++++++++++++++++++
 src/mainboard/pcengines/apu2/s1_button.h |  16 ++++
 3 files changed, 134 insertions(+)
 create mode 100644 src/mainboard/pcengines/apu2/s1_button.c
 create mode 100644 src/mainboard/pcengines/apu2/s1_button.h

diff --git a/src/mainboard/pcengines/apu2/Makefile.mk b/src/mainboard/pcengines/apu2/Makefile.mk
index 37ac356e33..423726ae10 100644
--- a/src/mainboard/pcengines/apu2/Makefile.mk
+++ b/src/mainboard/pcengines/apu2/Makefile.mk
@@ -6,13 +6,16 @@ romstage-y += bios_knobs.c
 romstage-y += BiosCallOuts.c
 romstage-y += OemCustomize.c
 romstage-y += gpio_ftns.c
+romstage-y += s1_button.c
 
 postcar-y += bios_knobs.c
+romstage-y += s1_button.c
 
 ramstage-y += bios_knobs.c
 ramstage-y += BiosCallOuts.c
 ramstage-y += OemCustomize.c
 ramstage-y += gpio_ftns.c
+ramstage-y += s1_button.c
 
 # Order of names in SPD_SOURCES is important!
 SPD_SOURCES  = HYNIX-2G-1333
diff --git a/src/mainboard/pcengines/apu2/s1_button.c b/src/mainboard/pcengines/apu2/s1_button.c
new file mode 100644
index 0000000000..d9e52fa856
--- /dev/null
+++ b/src/mainboard/pcengines/apu2/s1_button.c
@@ -0,0 +1,115 @@
+/*
+ * This file is part of the coreboot project.
+ *
+ * Copyright (C) 2018 PC Engines GmbH
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+
+#include <string.h>
+#include <stdlib.h>
+#include <spi_flash.h>
+#include <spi-generic.h>
+#include <boot_device.h>
+#include <fmap.h>
+#include <commonlib/region.h>
+#include <console/console.h>
+
+#include "s1_button.h"
+#include "bios_knobs.h"
+
+static int find_knob_index(const char *s, const char *pattern)
+{
+
+	int pattern_index = 0;
+	char *result = (char *) s;
+	char *lpattern = (char *) pattern;
+
+	while (*result && *pattern ) {
+		if ( *lpattern == 0)  // the pattern matches return the pointer
+			return pattern_index;
+		if ( *result == 0)  // We're at the end of the file content but don't have a patter match yet
+			return -1;
+		if (*result == *lpattern ) {
+			// The string matches, simply advance
+			result++;
+			pattern_index++;
+			lpattern++;
+		} else {
+			// The string doesn't match restart the pattern
+			result++;
+			pattern_index++;
+			lpattern = (char *) pattern;
+		}
+	}
+
+	return -1;
+}
+
+static int flash_bootorder_file(size_t offset, size_t fsize, char *buffer)
+{
+	const struct spi_flash *flash;
+
+	flash = boot_device_spi_flash();
+
+	if (flash == NULL) {
+		printk(BIOS_WARNING, "Can't get boot flash device\n");
+		return -1;
+	}
+
+	printk(BIOS_DEBUG, "Erasing SPI flash at %lx size %lx\n", offset, fsize);
+
+	if (spi_flash_erase(flash, (u32) offset, fsize)) {
+		printk(BIOS_WARNING, "SPI erase failed\n");
+		return -1;
+	}
+
+	printk(BIOS_DEBUG, "Writing SPI flash at %lx size %lx\n", offset, fsize);
+
+	if (spi_flash_write(flash, offset, fsize, buffer)) {
+		printk(BIOS_WARNING, "SPI write failed\n");
+		return -1;
+	}
+
+	printk(BIOS_INFO, "Bootorder write succeed\n");
+	return 0;
+}
+
+void enable_console(void)
+{
+	size_t size = 0x1000;
+	char bootorder_copy[0x1000];
+	char *bootorder = get_bootorder();
+	int knob_index;
+
+	if (!bootorder) {
+		printk(BIOS_WARNING,"Could not enable console, no bootorder\n");
+	}
+
+	memcpy(bootorder_copy, bootorder, size);
+
+	knob_index = find_knob_index(bootorder, "scon");
+
+	if (knob_index == -1){
+		printk(BIOS_WARNING,"scon knob not found in bootorder\n");
+		return;
+	}
+
+	*(bootorder_copy + (size_t)knob_index) = '1';
+
+	if (CONFIG(SEABIOS_BOOTORDER_IN_FMAP)) {
+		if (fmap_overwrite_area("BOOTORDER", bootorder_copy, size) != size)
+			printk(BIOS_WARNING, "Failed to flash bootorder\n");
+	} else {
+		if (flash_bootorder_file((size_t)(uintptr_t)bootorder, size, bootorder_copy))
+			printk(BIOS_WARNING, "Failed to flash bootorder file\n");
+	}
+}
diff --git a/src/mainboard/pcengines/apu2/s1_button.h b/src/mainboard/pcengines/apu2/s1_button.h
new file mode 100644
index 0000000000..8ab399416c
--- /dev/null
+++ b/src/mainboard/pcengines/apu2/s1_button.h
@@ -0,0 +1,16 @@
+/*
+ * This file is part of the coreboot project.
+ *
+ * Copyright (C) 2018 PC Engines GmbH
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+ void enable_console(void);
-- 
2.49.0

