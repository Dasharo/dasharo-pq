From 0625e390b88c8eca4cf9dd4667bbb4cfb3f5d37f Mon Sep 17 00:00:00 2001
From: Kamil Wcislo <kamil.wcislo@3mdeb.com>
Date: Wed, 22 Nov 2017 15:27:41 +0100
Subject: [PATCH 11/87] drivers/spi: add secure registers support for winbond
 chips

Upstream-Status: Pending
Signed-off-by: Kamil Wcislo <kamil.wcislo@3mdeb.com>
---
 src/drivers/spi/spi_flash.c   |  6 +++
 src/drivers/spi/spi_winbond.h |  5 +++
 src/drivers/spi/winbond.c     | 76 ++++++++++++++++++++++++++++++++++-
 src/include/spi_flash.h       |  5 +++
 4 files changed, 91 insertions(+), 1 deletion(-)

diff --git a/src/drivers/spi/spi_flash.c b/src/drivers/spi/spi_flash.c
index 11597c6c1d..bde0a45e7c 100644
--- a/src/drivers/spi/spi_flash.c
+++ b/src/drivers/spi/spi_flash.c
@@ -607,6 +607,12 @@ int spi_flash_status(const struct spi_flash *flash, u8 *reg)
 	return -1;
 }
 
+int spi_flash_read_sec(const struct spi_flash *flash, u32 offset, size_t len,
+		void *buf)
+{
+	return flash->ops->read_sec(flash, offset, len, buf);
+}
+
 int spi_flash_is_write_protected(const struct spi_flash *flash,
 				 const struct region *region)
 {
diff --git a/src/drivers/spi/spi_winbond.h b/src/drivers/spi/spi_winbond.h
index bdf6694306..44f98c389d 100644
--- a/src/drivers/spi/spi_winbond.h
+++ b/src/drivers/spi/spi_winbond.h
@@ -18,6 +18,11 @@
 #define CMD_W25_DP		0xb9 /* Deep Power-down */
 #define CMD_W25_RES		0xab /* Release from DP and Read Signature */
 #define CMD_VOLATILE_SREG_WREN	0x50 /* Write Enable for Volatile SREG */
+#define CMD_W25_RD_SEC		0x48	/* Read security registers */
+
+#define ADDR_W25_SEC1      0x10
+#define ADDR_W25_SEC2      0x20
+#define ADDR_W25_SEC3      0x30
 
 /* tw: Maximum time to write a flash cell in milliseconds */
 #define WINBOND_FLASH_TIMEOUT 30
diff --git a/src/drivers/spi/winbond.c b/src/drivers/spi/winbond.c
index db93ff616c..d3a6f75284 100644
--- a/src/drivers/spi/winbond.c
+++ b/src/drivers/spi/winbond.c
@@ -249,6 +249,66 @@ static const struct spi_flash_part_id flash_table[] = {
 	},
 };
 
+static int do_spi_flash_cmd_read(const struct spi_slave *spi, const void *dout,
+			    size_t bytes_out, void *din, size_t bytes_in)
+{
+	int ret;
+	/*
+	 * SPI flash requires command-response kind of behavior. Thus, two
+	 * separate SPI vectors are required -- first to transmit dout and other
+	 * to receive in din. If some specialized SPI flash controllers
+	 * (e.g. x86) can perform both command and response together, it should
+	 * be handled at SPI flash controller driver level.
+	 */
+	struct spi_op vectors[] = {
+		[0] = { .dout = dout, .bytesout = bytes_out,
+			.din = NULL, .bytesin = 0, },
+		[1] = { .dout = NULL, .bytesout = 0,
+			.din = din, .bytesin = bytes_in },
+	};
+	size_t count = ARRAY_SIZE(vectors);
+	if (!bytes_in)
+		count = 1;
+
+	ret = spi_claim_bus(spi);
+	if (ret)
+		return ret;
+
+	ret = spi_xfer_vector(spi, vectors, count);
+
+	spi_release_bus(spi);
+	return ret;
+}
+
+static int winbond_sec_read(const struct spi_flash *flash, u32 offset,
+				size_t len, void *buf)
+{
+	int ret = 1;
+	u8 cmd[5];
+	u8 reg = (offset >> 8) & 0xFF;
+	u8 addr = offset & 0xFF;
+
+	if (reg != ADDR_W25_SEC1 && reg != ADDR_W25_SEC2 &&
+			reg != ADDR_W25_SEC3) {
+		printk(BIOS_WARNING, "SF: Wrong security register\n");
+		return 1;
+	}
+
+	cmd[0] = CMD_W25_RD_SEC;
+	cmd[1] = 0x0;
+	cmd[2] = reg;
+	cmd[3] = addr;
+	cmd[4] = 0x0; // dummy
+
+	ret = do_spi_flash_cmd_read(&flash->spi, cmd, sizeof(cmd), buf, len);
+	if (ret) {
+		printk(BIOS_WARNING, "SF: Can't read sec register %d\n",
+			reg >> 4);
+	}
+
+	return ret;
+}
+
 /*
  * Convert BPx, TB and CMP to a region.
  * SEC (if available) must be zero.
@@ -610,6 +670,20 @@ static const struct spi_flash_protection_ops spi_flash_protection_ops = {
 	.set_write = winbond_set_write_protection,
 };
 
+const struct spi_flash_ops_descriptor spi_flash_winbond_desc = {
+	.erase_cmd = 0x20, /* Sector Erase */
+	.status_cmd = 0x05, /* Read Status */
+	.pp_cmd = 0x02, /* Page Program */
+	.wren_cmd = 0x06, /* Write Enable */
+	.ops = {
+		.read = spi_flash_cmd_read,
+		.write = spi_flash_cmd_write_page_program,
+		.erase = spi_flash_cmd_erase,
+		.status = spi_flash_cmd_status,
+		.read_sec = winbond_sec_read,
+	},
+};
+
 const struct spi_flash_vendor_info spi_flash_winbond_vi = {
 	.id = VENDOR_ID_WINBOND,
 	.page_size_shift = 8,
@@ -617,6 +691,6 @@ const struct spi_flash_vendor_info spi_flash_winbond_vi = {
 	.match_id_mask[0] = 0xffff,
 	.ids = flash_table,
 	.nr_part_ids = ARRAY_SIZE(flash_table),
-	.desc = &spi_flash_pp_0x20_sector_desc,
+	.desc = &spi_flash_winbond_desc,
 	.prot_ops = &spi_flash_protection_ops,
 };
diff --git a/src/include/spi_flash.h b/src/include/spi_flash.h
index d5471a4406..40db17fece 100644
--- a/src/include/spi_flash.h
+++ b/src/include/spi_flash.h
@@ -47,6 +47,8 @@ struct spi_flash_ops {
 			const void *buf);
 	int (*erase)(const struct spi_flash *flash, u32 offset, size_t len);
 	int (*status)(const struct spi_flash *flash, u8 *reg);
+	int (*read_sec)(const struct spi_flash *flash, u32 offset, size_t len,
+			void *buf);
 };
 
 struct spi_flash_bpbits {
@@ -156,6 +158,8 @@ int spi_flash_write(const struct spi_flash *flash, u32 offset, size_t len,
 		    const void *buf);
 int spi_flash_erase(const struct spi_flash *flash, u32 offset, size_t len);
 int spi_flash_status(const struct spi_flash *flash, u8 *reg);
+int spi_flash_read_sec(const struct spi_flash * flash, u32 offset, size_t len,
+		       void *buf);
 
 /*
  * Return the vendor dependent SPI flash write protection state.
@@ -171,6 +175,7 @@ int spi_flash_status(const struct spi_flash *flash, u8 *reg);
  */
 int spi_flash_is_write_protected(const struct spi_flash *flash,
 				 const struct region *region);
+
 /*
  * Enable the vendor dependent SPI flash write protection. The region not
  * covered by write-protection will be set to write-able state.
-- 
2.49.0

